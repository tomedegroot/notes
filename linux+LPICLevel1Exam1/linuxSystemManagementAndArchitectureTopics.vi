#/sys, /proc, /dev and /var

##/var

###/var/log

Central location for all logs

###/var/cache

Contains repository caches

###/var/lib

Contain libraries and some config for example networking

##/sys

Maintains references to devices from a config perspective. So the config of the devices is in these file:

1. */sys/devices/system/cpu/cpu0* -> holds file related to the cpu
2. */sys/devices/software*
3. */sys/kernel* -> programs use these to get system info

##/proc

Everything in Linux has a reference to a file. Processes live in */proc* and you can `cd` into a process.

Or get info on systems via:

```
/proc/cpuinfo
/proc/filesystems
/proc/meminfo
/proc/sys/kernel
```

Write to `/proc/sys/kernel/hostname` to set the hostname

*/dev

Contains a list of devices that are on can be connected to the file system

So via /dev/stdout one can write to stdoutA

#lsmod

Nicely formats the information that is within */proc/modules*. (This is where kernel modules are loaded)[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/5/html/Deployment_Guide/s2-proc-modules.html]

#lspci and lsusb

##lspci 

`lspci` -> list info on pci buses and devices connected to them
  1. `-v` -> verbose
  2. `-vv` -> more verbose
  3. `-vvv` -> even more verbose
  4. `-n` -> remove name lookup format from our system
  5. `-x` -> show heXadecimal dump of standard part of the config space
  6. `-b` -> bus-centric view: in order of all the buses
  7. `-t` -> get a tree view: see how stuff is connected in your system
  8. `-s DOMAIN` -> search within a domain. This is the same as doing `lspci | grep DOMAIN`
  9. `-m` -> Output machine readable form

lspci reads */usr/share/hwdata/pci.ids*


##lsusb

Same as lspci

`lsusb [OPTIONS]`
  1. `-s` get by port
  2. `d VENDOR:DEVICEID`
  3/ `-t` -> get a tree view, easy when you have a hub

#modprobe and lsmod

Add, remove and view loadable Linux kernel modules. Mod location = */lib/modules/KERNELVERSION/kernel*, so `cd /lib/modules/$(uname -r)/kernel`

In CentOS 7 (lsmod)[https://www.centos.org/docs/5/html/5.1/Deployment_Guide/s1-kernel-module-utils.html] is used to show the **loaded** the kernel modules. `lsmod` formats contents of */proc/modules* pseudo-file

1. `lsmod` -> list all the loaded modules
2. `modprobe -r` -> remove a module.
3. `modprobe [MODNAME]` -> load a module

Example: `modprobe floppy`. You could use the older insmod, but it needs the full path: `/lib/modules/3.10.0-327.28.2.el7.x86_64/kernel/drivers/block/floppy.ko`


#GRUB

GRUB2 is the default Linux (bootloader)[http://www.cs.tau.ac.il/telux/lin-club_files/linux-boot/slide0002.htm] for all distro's

In */etc/default/grub* is GRUB's default config. After editing this file, do `sudo update-grub` affectuate the changes. Comment out the following two lines to show the bootloader:

GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true

*/etc/grub.d/* contains the config files for the GRUB menu. Contents:

```
-rwxr-xr-x. 1 root root  8702 Jan  5  2016 00_header
-rwxr-xr-x. 1 root root   992 May  4  2015 00_tuned
-rwxr-xr-x. 1 root root   232 Jan  5  2016 01_users
-rwxr-xr-x. 1 root root 10232 Jan  5  2016 10_linux
-rwxr-xr-x. 1 root root 10275 Jan  5  2016 20_linux_xen
-rwxr-xr-x. 1 root root  2559 Jan  5  2016 20_ppc_terminfo
-rwxr-xr-x. 1 root root 11169 Jan  5  2016 30_os-prober
-rwxr-xr-x. 1 root root   214 Jan  5  2016 40_custom
-rwxr-xr-x. 1 root root   216 Jan  5  2016 41_custom
-rw-r--r--. 1 root root   483 Jan  5  2016 README
```

update-grub reads these bash scripts from 00 to the highest number. Is is possible to add your own menu entry by adding a file in grub.d.

